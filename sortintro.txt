package ru.vsu.cs.vvp2020.g81.kirilenko_n_o;

import ru.vsu.cs.vvp2020.g81.kirilenko_n_o.animation.SortState;

import java.util.ArrayList;
import java.util.List;

public class Introsort<T>{

        private static final int LIMIT = 16;

        public static <T extends Comparable<T>> void sort(T[] arr) {
            List<SortState> states = new ArrayList<>();
            introSort(arr, 0, arr.length, (int) (2 * Math.floor(Math.log(arr.length) / Math.log(2))), states);
        }

        private static <T extends Comparable<T>> void introSort(T[] arr, int from, int to, int depthLimit, List<SortState> states) {
            if (to - from <= LIMIT)
                InsertionSort.sort(arr, states);
            else if (depthLimit == 0)
                HeapSort.sort(arr, states);
            else {
                //QuickSort.randomizePivot(arr, from , to, states);
                int pivot = QuickSort.partition(arr, from, to, Comparable::compareTo, states);
                introSort(arr, from, pivot, depthLimit - 1, states);
                introSort(arr,pivot + 1, to, depthLimit - 1, states);
            }
        }
    }
